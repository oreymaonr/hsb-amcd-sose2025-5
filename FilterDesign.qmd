---
title: "Filter-Design"
---

## Tow Tomas circuit
This is a basic tow thomas circuit specification

### Equations
\begin{equation}
    \tag{1}
    Q = \frac{f_0}{B.W}
\end{equation}

\begin{equation}
    \tag{2}
    R = \frac{1}{\omega_0 C}
\end{equation}

\begin{equation}
    \tag{3}
    R_2 = Q R
\end{equation}
\begin{equation}
    \tag{4}
    R_1 = \frac{R Q}{A_{mid}}
\end{equation}


### Designing a bandpass filter using `tow-thomas` circuit

#### Given 

$f_0$ = 1000 Hz and $Q$ = 10

#### Unknowns

$R$, $R_1$, $R_2$, $R_3$, $C$

#### Analysis

1. from Eq.1 we get, $B.W$ = $\frac{f_0}{Q}$= $\frac{1000}{10}$=100Hz
2. we substitute $\omega_0$ = $2\pi f_0$
3. from the above equations we calculate all values and store the available capacitor values in `clist` of the below python code. Note that the capacitance value is in $\mu F$
4. $R_3$ is choosen arbitarily so as to not load down the second or the third op-amp

```{python}
#basic tow thomas
import numpy as np
import ltspice
import matplotlib.pyplot as plt

def bandPassFilterTowThomas(f_0,Q,A_mid,clist):
    for c in clist:
        print("For C: ",c)
        c=c*10e-6 #in microFarard        
        w_0 = 2*np.pi*f_0
        #Q=10 #quality factor
        #A_mid = 20 #midband gain
        k = 10**-3
        R = 1/(w_0*c)
        print(f"\t R : {R*10e-3} kOhm")
        R_2 = Q*R
        print(f"\t R_2 : {R_2*10e-3} kOhm") 
        R_1 = R*Q/A_mid
        print(f"\t R_1 : {R_1*10e-3} kOhm")
clist=[0.01,0.1,0.2,1,0.0027]
bandPassFilterTowThomas(1000,10,20,clist)
```

#### Choice

We choose $C$ = 0.1$\mu F$ so as to have the resistance on a reasonable level and we choose $R_1$ to be on same as that of $R$

#### Simulation

- We simulate the same using Ki-Cad
![Tow Thomas Biquad Filter](./Schematics/amcd%20class1.svg)
- The graph of the simulated data is as follows

```{python}
import ltspice
# importing and plotting 
tt = ltspice.Ltspice('.\\RAW\\tt.raw') 
tt.parse() 
f = tt.get_frequency()
```
```{python}
# tt bandpass
v_bpf = tt.get_data('v(/bpf)')
plt.xscale('log')
plt.plot(f,v_bpf)
plt.grid()
plt.show()
```

# KHN Biquad

## Choice 
we either choose $C$ or we choose $R$. A single value of R or C is chosen for `all individual filters` throughout for the design simplification.

## Simulation
- The simulation is as follows
- We simulate the same using Ki-Cad
![KHN Biquad Filter](./Schematics/KHNbiquad.svg)

```{python}
#KHN biquad :: red pitaya

class KHNFilter:          
    def __init__(self,h_0,w_0,Q):                
        self.h_0 = h_0
        self.w_0 = w_0
        self.Q = Q        
        
    def tf(self,name,num,den_s_0,den_s_1,den_s_2):
        '''Just a Display Function of a TF'''
        line = "---------------------"
        den = f"({den_s_2} S^2)({den_s_1} S)({den_s_0})"
        print(f"\n{name}\n")
        print(num)            
        print(line)
        print(den)
    def generatetf(self):
        self.lowpassfilter()
        self.highpassfilter()
        self.bandpassfilter()
        self.bandstopfilter()
    def lowpassfilter(self):        
        numerator = f"({self.h_0})"
        den_0 = 1/np.square(w_0)
        den_1 = 1/(w_0*Q)
        self.tf("Low Pass Filter: ",numerator,den_0,den_1,1)   
    def highpassfilter(self):        
        numerator = f"({self.h_0*np.square(1/self.w_0)} S^2)"
        den_0 = 1/np.square(w_0)
        den_1 = 1/(w_0*Q)
        self.tf("High Pass Filter: ",numerator,den_0,den_1,1)
    def bandpassfilter(self):        
        numerator = f"({-self.h_0 * 1/self.w_0} S)"
        den_0 = 1/np.square(w_0)
        den_1 = 1/(w_0*Q)
        self.tf("Band Pass Filter: ",numerator,den_0,den_1,1)
    def bandstopfilter(self):        
        numerator = f"({1}+{np.square(1/self.w_0)} S^2){self.h_0}"
        den_0 = 1/np.square(w_0)
        den_1 = 1/(w_0*Q)
        self.tf("Band Stop Filter: ",numerator,den_0,den_1,1)        

# Given
Q = 10
f_0 = 1000 #Hz
## so,
w_0 = 2*np.pi*f_0

# Choice
H_0 = 1 #gain
C = 0.1 *10e-6 #F
## so,
R = 1/(w_0*C)

### Rough Notes
BSF_resistor = Q*R
H_0_resistor = R/H_0
print(f"\
    BSF resistor : {BSF_resistor*10e-3} kOhm,\n\
    General R: {R*10e-3}kOhm\n\
    H_0 Resistor: {H_0_resistor*10e-3}kOhm\
    ")

# Filter design
filter_1 = KHNFilter(H_0,w_0,Q)
#filter_1.generatetf()

# importing and plotting 
khn = ltspice.Ltspice('.\\RAW\\khn.raw') 
khn.parse() 
f = khn.get_frequency()

```

#### Low pass khn biquad
```{python}
# low pass plot
v_lpf = khn.get_data('v(/lpf)')
plt.xscale('log')
plt.plot(f,v_lpf)
plt.grid()
plt.show()
```

#### High pass khn biquad

```{python}
# high pass plot
v_hpf = khn.get_data('v(/hpf)')
plt.xscale('log')
plt.plot(f,v_hpf)
plt.grid()
plt.show()
```

#### Band pass khn biquad

```{python}
# band pass plot
v_bpf = khn.get_data('v(/bpf)')
plt.xscale('log')
plt.plot(f,v_bpf)
plt.grid()
plt.show()
```

#### Band stop khn biquad

```{python}
# band stop plot
v_bsf = khn.get_data('v(/bsf)')
plt.xscale('log')
plt.plot(f,v_bsf)
plt.grid()
plt.show()
```