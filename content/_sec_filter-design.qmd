
# Filter Design

We are trying to achieve a ideal filter solution, theoretical filter solution and a practical/real filter solution.

Since $f$ and $Q$ are predefined and fixed, we either choose $C$ or we choose $R$. A single value of $R$ or $C$ is chosen for `filters` throughout for the design simplification.

## Ideal Filter
For this scenario we use the **exact** values  for $R$ and $C$. For the ease of process we fix $R = 1 kOhm$ and then calculate  the value of $C$.

```{python}
# ideal Filter
import numpy as np

class Filter:          
    def __init__(self,h_0,w_0,Q):                
        self.h_0 = h_0
        self.w_0 = w_0
        self.Q = Q        
        
    def generatetf(self):
        '''Calculate all transfer functions'''
        self.lowpassfilter()
        self.highpassfilter()
        self.bandpassfilter()
        self.bandstopfilter()
    def lowpassfilter(self):        
        '''Low Pass Filter'''
        numerator = f"          {self.h_0}"        
        self.tf("Low Pass Filter: ",numerator)   
    def highpassfilter(self):
        '''High Pass Filter'''        
        numerator = f"      {np.round(self.h_0*np.square(1/self.w_0)*10**8,4)}e8 s^2"
        self.tf("High Pass Filter: ",numerator)
    def bandpassfilter(self):        
        '''Band Pass Filter'''
        numerator = f"{np.round((-self.h_0 * 1/self.w_0)*10**3,4)}e-3 s"
        self.tf("Band Pass Filter: ",numerator)
    def bandstopfilter(self): 
        '''Band Stop Filter'''       
        numerator = f"  ( {1} + {np.round(np.square(1/self.w_0)*10**8,4)}e-8 s^2 ) {self.h_0}"        
        self.tf("Band Stop Filter: ",numerator)        
    def tf(self,name,num):
        den_0 = np.round(1/np.square(self.w_0)*10**7,4)
        den_1 = np.round(1/(self.w_0*self.Q)*10**5,4)
        '''Just a Display Function of a TF'''
        line = "----------------------------"
        den = f"s^2 + {den_1}e-5s + {den_0}e-7"
        print(f"\n{name}\n")
        print(num)            
        print(line)
        print(den)

# Given
Q = 10
f_0 = 1000 #Hz
## so,
w_0 = 2*np.pi*f_0

# Choice
H_0 = 1 #gain
# C = 0.1 *10**-6 #F
R = 1000 # Ohm
## so,
C = 1/(w_0*R)

### Rough Notes
BSF_resistor = Q*R
H_0_resistor = R/H_0
print(f"General Variables:\
R : {R*10**-3} K Ohm\n\
C : {np.round(C*10**6,3)} uF\n\
BSF resistor : {BSF_resistor*10**-3} kOhm,\n\
General R: {R*10e-3}kOhm\n\
H_0 Resistor: {H_0_resistor*10**-3}kOhm\
")

# Filter design
idealfilter = Filter(H_0,w_0,Q)
print("Transfer Functions:")
idealfilter.generatetf()

```

## Theoretical Filter
For this scenario we use the values of capacitors and resistors readily available in the laboratory for $R$ and $C$. The simuations for the arorementioned is made along.

Since we adjust with the laboratory available solutionw we go for capactiance $C = 157 uF$ and All the resistors are of $1k$ instead of the first resistor near BSF which is of $10k$.

## Practical Filter
For this filter, red pitaya board is used and simulated to get reponses. The graphs and details are generated from the red pitaya software.


## Simulation
- The simulation is as follows
- We simulate the same using Ki-Cad as per @fig-filter

![Biquad Filter Design](./RAW/FilterDiagram.svg){#fig-filter}

