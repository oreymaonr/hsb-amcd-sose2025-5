# Filter Design

## Objective

The objective is to design a biquadratic filter with the **corner frequency = 1000Hz and Q = 10.**

## Behavioural Model

This is a theoretical model so as to understand the acheivable taget using the transfer functions of active filters such as low pass, high pass, band pass and band stop filter. The basics is refered from @baker2010.

### Behavioural model of active filters using Python

Low Pass Filter :

$$
H(s) = \frac{H_0}{(1+\frac{s}{w_0 Q}+\frac{s^2}{w_0^2})} = \frac{1}{1e-06s^2 + 0.0001s + 1}
$$

High Pass Filter:  

$$H(s) = \frac{V_{01}}{V_i} = \frac{H_0\frac{s^2}{w_0^2}}{(1+\frac{s}{w_0 Q}+\frac{s^2}{w_0^2})} = \frac{1e-06 s^2}{1e-06s^2 + 0.0001s + 1}$$

Band Pass Filter:  

$$H(s) = \frac{V_{02}}{V_i} = \frac{-H_0\frac{s}{w_0}}{(1+\frac{s}{w_0 Q}+\frac{s^2}{w_0^2})} = \frac{-0.001 s}{1e-06s^2 + 0.0001s + 1}$$

Band Stop Filter:  

$$H(s) = \frac{V_{04}}{V_i} = \frac{(1 + \frac{s^2}{w_0^2})H_0}{(1+\frac{s}{w_0 Q}+\frac{s^2}{w_0^2})} = \frac{( 1 + 1e-06 s^2 ) 1}{1e-06s^2 + 0.0001s + 1}$$

where, $Q$= Quality Factor, $H_0$= Gain,  $\omega_0$=Corner Frequency

The python code for generating frequency response and step response is given [here.](https://github.com/oreymaonr/hsb-amcd-sose2025-5/blob/main/content/plotfn.py)

#### Behavioural phase and magnitude plots (Frequency response plots)

These plots as per @fig-behavioural-frequency are generated by the transfer function equations using `signal.bode()` of python scipy module.

::: {#fig-behavioural-frequency layout-ncol=2}

![Band Pass](./RAW/images/behaviourial/bode/bpf.png){#fig-bpf}

![Band Stop](./RAW/images/behaviourial/bode/bsf.png){#fig-bpf}

![High Pass](./RAW/images/behaviourial/bode/hpf.png){#fig-bpf}

![Low Pass](./RAW/images/behaviourial/bode/lpf.png){#fig-bpf}

Behavioural phase and magnitude plots
:::

#### Behavioural Steady State response (Transcient response plots)

These plots at @fig-behavioural-transcient is generated solely by `signal.step()` from scipy python module.

::: {#fig-behavioural-transcient layout-ncol=2}

![Band Pass](./RAW/images/behaviourial/Transcient/bpf.png){#fig-bpf}

![Band Stop](./RAW/images/behaviourial/Transcient/bsf.png){#fig-bpf}

![High Pass](./RAW/images/behaviourial/Transcient/hpf.png){#fig-bpf}

![Low Pass](./RAW/images/behaviourial/Transcient/lpf.png){#fig-bpf}

Behavioural phase and magnitude plots
:::


#### Behavioural pole-zero plots

These plots at @fig-behavioural-pole-zero is generated by `control.poles()` and `control.step_info()` from control python module.

::: {#fig-behavioural-pole-zero layout-ncol=2}

![Band Pass](./RAW/images/behaviourial/pzplot/bpf.png){#fig-bpf}

![Band Stop](./RAW/images/behaviourial/pzplot/bsf.png){#fig-bpf}

![High Pass](./RAW/images/behaviourial/pzplot/hpf.png){#fig-bpf}

![Low Pass](./RAW/images/behaviourial/pzplot/lpf.png){#fig-bpf}

Behavioural phase and magnitude plots
:::

## Simulation Model

KiCad and ngspice is used for the model simulation. 

- We know $\omega = \frac{1}{RC}$. We set an initial value for $R$, here,$R=1000 \Omega$. Calculating we get the $C = 157 nF$.
- We arrive at a sample circuit diagram as per @fig-filter. 
- Where, RA1, RB1, RC1, RC2, RC3, RD2 = R = 1000 $\Omega$
- CA4 , CB3 = C = 157 $nF$. 
- RD1 = $Q \cdot R$,Since Q=10, RD1 = 10k $\Omega$. 
- RD3 = $R/H_0$. Since $H_0$ = 1, RD3 = 1000 $\Omega$.
- U1A, U1B, U2A, U2B are operational amplifiers.
- $V_{in}$ is the input voltage
- The outputs are take from the above mentioned op-amps. BPF from U1A, LPF from U1B, HPF from U2A and BSF from U2B respectively. 

![Biquad Filter Design](./RAW/FilterDiagram.svg){#fig-filter}

The same is realised in KiCad as shown in @fig-kicadschematics

![KiCad schematics](./RAW/images/breadcrumps/RealKHNbiquad.svg){#fig-kicadschematics}

### Comparison of models using **KiCad-ngspice** and **Red Pitaya-Analog System Lab Kit PRO**

#### ALSK Pro board circuit connections

The circuit connections in ALSK Pro is made as @fig-alsk-connections

![ALSK Pro board circuit connections](./RAW/images/breadcrumps/alskdigikey.jpg){#fig-alsk-connections}

The red-pitaya module as in @fig-red-pitaya-module acts as an oscilloscope, where the data could be taken from the server hosted by the module.

![Red pitaya module](./RAW/images/breadcrumps/red-pitaya.jpg){#fig-red-pitaya-module}

The Complete Circuit connection for the setup is shown as @fig-setup

![Complete circuit connections](./RAW/images/breadcrumps/setup.jpg){#fig-setup}