
# Filter Design

 ![Caption](./RAW/FilterDiagram.svg){#fig-filter}

as per @fig-filter we het.

We are trying to achieve a ideal filter solution, theoretical filter solution and a practical/real filter solution.

Since $f$ and $Q$ are predefined and fixed, we either choose $C$ or we choose $R$. A single value of $R$ or $C$ is chosen for `filters` throughout for the design simplification.

## Ideal Filter
For this scenario we use the exact calculated values  for $R$ and $C$. 

```{python}
import numpy as np

f0=1000 #hz
Q=10

#we fix 
R = 1000 #Ohm
H0 = 1

# so,
w0 = 2*np.pi*f0
print(f"w_0 is {w0}")
C = 1/(w0*R)
print(f"capacitance is {np.round(C*10**6,3)} uF")
print(f"resistance is {R*10**-3} kOhm")
R2 = Q*R
print(f"first resistance near BSF {R2*10**-3} kOhm")
R3 = R/H0
print(f"second resistance near BSF {R3*10**-3} kOhm")

```

## Theoretical Filter
For this scenario we use the values of capacitors and resistors readily available in the laboratory for $R$ and $C$. The simuations for the arorementioned is made along.

Since we adjust with the laboratory available solutionw we go for capactiance $C = 157 uF$ and All the resistors are of $1k$ instead of the first resistor near BSF which is of $10k$.

## Practical Filter
For this filter, red pitaya board is used and simulated to get reponses. The graphs and details are generated from the red pitaya software.


## Simulation
- The simulation is as follows
- We simulate the same using Ki-Cad
![KHN Biquad Filter](./Schematics/KHNbiquad.svg)

```{python}
#KHN biquad :: red pitaya
# import numpy as np
# import ltspice 

# class KHNFilter:          
#     def __init__(self,h_0,w_0,Q):                
#         self.h_0 = h_0
#         self.w_0 = w_0
#         self.Q = Q        
        
#     def tf(self,name,num,den_s_0,den_s_1,den_s_2):
#         '''Just a Display Function of a TF'''
#         line = "---------------------"
#         den = f"({den_s_2} S^2)({den_s_1} S)({den_s_0})"
#         print(f"\n{name}\n")
#         print(num)            
#         print(line)
#         print(den)
#     def generatetf(self):
#         self.lowpassfilter()
#         self.highpassfilter()
#         self.bandpassfilter()
#         self.bandstopfilter()
#     def lowpassfilter(self):        
#         numerator = f"({self.h_0})"
#         den_0 = 1/np.square(w_0)
#         den_1 = 1/(w_0*Q)
#         self.tf("Low Pass Filter: ",numerator,den_0,den_1,1)   
#     def highpassfilter(self):        
#         numerator = f"({self.h_0*np.square(1/self.w_0)} S^2)"
#         den_0 = 1/np.square(w_0)
#         den_1 = 1/(w_0*Q)
#         self.tf("High Pass Filter: ",numerator,den_0,den_1,1)
#     def bandpassfilter(self):        
#         numerator = f"({-self.h_0 * 1/self.w_0} S)"
#         den_0 = 1/np.square(w_0)
#         den_1 = 1/(w_0*Q)
#         self.tf("Band Pass Filter: ",numerator,den_0,den_1,1)
#     def bandstopfilter(self):        
#         numerator = f"({1}+{np.square(1/self.w_0)} S^2){self.h_0}"
#         den_0 = 1/np.square(w_0)
#         den_1 = 1/(w_0*Q)
#         self.tf("Band Stop Filter: ",numerator,den_0,den_1,1)        

# # Given
# Q = 10
# f_0 = 1000 #Hz
# ## so,
# w_0 = 2*np.pi*f_0

# # Choice
# H_0 = 1 #gain
# C = 0.1 *10e-6 #F
# ## so,
# R = 1/(w_0*C)

# ### Rough Notes
# BSF_resistor = Q*R
# H_0_resistor = R/H_0
# print(f"\
#     BSF resistor : {BSF_resistor*10e-3} kOhm,\n\
#     General R: {R*10e-3}kOhm\n\
#     H_0 Resistor: {H_0_resistor*10e-3}kOhm\
#     ")

# # Filter design
# filter_1 = KHNFilter(H_0,w_0,Q)
# #filter_1.generatetf()

# importing and plotting 
# khn = ltspice.Ltspice('.\\RAW\\khn.raw') 
# khn.parse() 
# f = khn.get_frequency()

```

#### Low pass khn biquad
```{python}
# low pass plot
# v_lpf = khn.get_data('v(/lpf)')
# plt.xscale('log')
# plt.plot(f,v_lpf)
# plt.grid()
# plt.show()
```

#### High pass khn biquad

```{python}
# high pass plot
# v_hpf = khn.get_data('v(/hpf)')
# plt.xscale('log')
# plt.plot(f,v_hpf)
# plt.grid()
# plt.show()
```

#### Band pass khn biquad

```{python}
# band pass plot
# v_bpf = khn.get_data('v(/bpf)')
# plt.xscale('log')
# plt.plot(f,v_bpf)
# plt.grid()
# plt.show()
```

#### Band stop khn biquad

```{python}
# band stop plot
# v_bsf = khn.get_data('v(/bsf)')
# plt.xscale('log')
# plt.plot(f,v_bsf)
# plt.grid()
# plt.show()
```

